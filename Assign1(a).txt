------------------------------------------ First Easy

You are in charge of the cake for your niece's birthday and have decided the cake will have one candle 
for each year of her total age. When she blows out the candles, sheâ€™ll only be able to blow out the 
tallest ones. Your task is to find out how many candles she can successfully blow out.

For example, if your niece is turning  years old, and the cake will have  candles of height 4, 4, 1, 3, 
she will be able to blow out  candles successfully, since the tallest candles are of height  and there 
are  such candles.


import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the birthdayCakeCandles function below.
    static int birthdayCakeCandles(int[] ar) {
        int count = 0;
        int highest = 0;
        if(ar.length >= 1 && ar.length <= Math.pow(10,5)){
            for(int i = 0; i < ar.length; i++){
                if(ar[i] >= 1 && ar[i] <= Math.pow(10,7)){
                    if(highest < ar[i]){
                        highest = ar[i];
                        count = 1;
                    }
                    else if(ar[i] == highest){
                        count += 1;
                    }
                }
            }
        }
        return count;

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arCount = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] ar = new int[arCount];

        String[] arItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < arCount; i++) {
            int arItem = Integer.parseInt(arItems[i]);
            ar[i] = arItem;
        }

        int result = birthdayCakeCandles(ar);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}

-------------------------------------------------Second Easy----------------------------------------------------------
Consider a staircase of size :

   #
  ##
 ###
####
Observe that its base and height are both equal to , and the image is drawn using # symbols 
and spaces. The last line is not preceded by any spaces.
Write a program that prints a staircase of size N.


import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the staircase function below.
    static void staircase(int n) {
        //restrictions
        String s = "";
        if(n <= 100 && n > 0){
            for(int row = 1; row <= n; row++){
                for(int col = 1; col <= n; col++){

                    if(n-row < col){
                        s += "#";
                    }
                    else{
                        s += " ";
                    }
                }
                
                // print line
                System.out.println(s);
                s = "";
            }
        }
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        staircase(n);

        scanner.close();
    }
}
-----------------------------------------------------Third Easy------------------------------------------------------
Given an array of integers, calculate the fractions of its elements that are positive, negative, and 
are zeros. Print the decimal value of each fraction on a new line.

Note: This challenge introduces precision problems. The test cases are scaled to six decimal places, 
though answers with absolute error of up to  are acceptable.

For example, given the array  there are  elements, two positive, two negative and one zero. Their 
ratios would be ,  and . It should be printed as

0.400000
0.400000
0.200000

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the plusMinus function below.
    static void plusMinus(int[] arr) {
        double positive = 0.0;
        double zero = 0.0;
        double negative = 0.0;

        double size = arr.length;

        //restrictions array size
        if(size <= 100 && size > 0){
            for(int i = 0; i < size; i++){

                // restrictions on size of numbers
                if(arr[i] <= 100 && arr[i] >= -100){
                    if(arr[i] > 0){
                        positive += 1;
                    }
                    else if(arr[i] < 0){
                        negative += 1;
                    }
                    else{
                        zero += 1;
                    }
                }
           
            }

        }
        positive = positive/size;
        zero = zero/size;
        negative = negative/size;
        

        System.out.println(positive);
        System.out.println(negative);
        System.out.println(zero);

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] arr = new int[n];

        String[] arrItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int arrItem = Integer.parseInt(arrItems[i]);
            arr[i] = arrItem;
        }

        plusMinus(arr);

        scanner.close();
    }
}
-----------------------------------------------------------Fourth Easy------------------------------------------------------
Calculate and print the sum of the elements in an array, keeping in mind that some of those integers may be quite large.

Function Description

Complete the aVeryBigSum function in the editor below. It must return the sum of all array elements.

aVeryBigSum has the following parameter(s):

ar: an array of integers .


import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the aVeryBigSum function below.
    static long aVeryBigSum(long[] ar) {
        long sum = 0;

        
        
        for(int i = 0; i < ar.length; i++){
            sum += ar[i];
        }

        return sum;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arCount = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        long[] ar = new long[arCount];

        String[] arItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < arCount; i++) {
            long arItem = Long.parseLong(arItems[i]);
            ar[i] = arItem;
        }

        long result = aVeryBigSum(ar);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
-------------------------------------Five Easy------------------------------------
Alice and Bob each created one problem for HackerRank. A reviewer rates the two 
challenges, awarding points on a scale from  to  for three categories: problem 
clarity, originality, and difficulty.

We define the rating for Alice's challenge to be the triplet , and the rating 
for Bob's challenge to be the triplet .

Your task is to find their comparison points by comparing  with ,  with , and  
with .

If , then Alice is awarded  point.
If , then Bob is awarded  point.
If , then neither person receives a point.
Comparison points is the total points a person earned.

Given  and , determine their respective comparison points.

For example,  and . For elements , Bob is awarded a point because . 
For the equal elements  and , no points are earned. Finally, for elements ,  
so Alice receives a point. Your return array would be  with Alice's score 
first and Bob's second.



import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Solution {

    // Complete the compareTriplets function below.
    static List<Integer> compareTriplets(List<Integer> a, List<Integer> b) {

        ArrayList<Integer> answer = new ArrayList<Integer>();

        answer.add(0);
        answer.add(0);


        for(int i = 0; i < a.size();i++){
            // constraints
            if(a.get(i) <= 100 && a.get(i) >= 1 && b.get(i) <= 100 && b.get(i)>= 1){
                // points
                if(a.get(i) < b.get(i)){
                    answer.set(1,answer.get(1) + 1);
                }
                else if(a.get(i) > b.get(i)){
                    answer.set(0, answer.get(0) + 1);
                }
            }
        }

        return answer;

    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        List<Integer> a = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> b = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = compareTriplets(a, b);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining(" "))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}

------------------------------------ Sixth Medium ----------------------------------
It's New Year's Day and everyone's in line for the Wonderland rollercoaster ride! There are a number of people queued up, and each person wears a sticker indicating their initial position in the queue. Initial positions increment by  from  at the front of the line to  at the back.

Any person in the queue can bribe the person directly in front of them to swap positions. If two people swap positions, they still wear the same sticker denoting their original places in line. One person can bribe at most two others. For example, if  and  bribes , the queue will look like this: .

Fascinated by this chaotic queue, you decide you must know the minimum number of bribes that took place to get the queue into its current state!