Matthew Fischer
Assignment 3

import java.io.File;
import java.util.Scanner;

/**
 *
 * @author Matthew Fischer
 */
public class MethodFile {

    int memory1 = 0;
    int memory2 = 0;
    
    public static void main(String[] args) {
        MethodFile m = new MethodFile();
        
        // READ FILE
        File file1 = new File("opcode1.txt");
        m.opcode(file1);
        
     
        File file2 = new File("opcode2.txt");
        m.opcode(file2);
        
        
        File file3 = new File("opcode3.txt");
        m.opcode(file3);
    }
    
    public void opcode(File file){
        Scanner x;
        
        
        
        // REGISTER 1
        String register1 = "";

        // REGISTER 2
        String  register2 = "";

        int rA = 0;
        int rB = 0;

        
        
        
        // File try catch
        try{
            
            x = new Scanner(file);
            
            while(x.hasNext()){
                // OPCODE
                String op = x.next();
               
                
                // END PROGRAM
                if(op.equals("09")){
                    System.out.println("terminate");
                    break;
                }
                // REGISTER 1
                register1 = x.next();
                
                
                // REGISTER 2
                register2 = x.next();
                
               
                // OPCODE
                switch(op){
                    //02 add (addressA + addressB and saved in second address)
                    case "02":
                        // REGISTER IS 000
                        if(register2.equals("000")){
                            rA = rA + rB;
                        }
                        else{
                            rB = rB + rA;
                        }
                        break;
                    //03 sub (addressA - addressB and saved in second address)
                    case "03":
                        // REGISTER IS 000
                        if(register2.equals("000")){
                            rA = rB - rA;
                        }
                        else{
                            rB = rA - rB;
                        }
                        break;
                    //04 multiply (addressA * addressB and saved in second address)
                    case "04":
                        // REGISTER IS 000
                        if(register2.equals("000")){
                            rA = rA * rB;
                        }
                        else{
                            rB = rB * rA;
                        }
                        break;
                    //05 divide (addressA / addressB and saved in second address)
                    case "05":
                        // REGISTER IS 000
                        if(register2.equals("000")){
                            rA = rB / rA;
                        }
                        else{
                            rB = rA / rB;
                        }
                        break;
                    //06 load instance (load value to address)
                    case "06":
                        // REGISTER IS 000
                        if(register1.equals("000")){
                            rA = Integer.parseInt(register2);
                        }
                        else{
                            rB = Integer.parseInt(register2);
                        }
                        break;
                    //07 load from memory (load memory to address)
                    case "07":
                        if(register1.equals("000") && register2.equals("400")){
                            rA = memory1;
                        }
                        else if(register1.equals("000") && register2.equals("500")){
                            rA = memory2;
                        }
                        else if(register1.equals("001") && register2.equals("400")){
                            rB = memory1;
                        }
                        else{
                            rB = memory2;
                        }
                        break;
                    //08 save from register to memory
                    case "08":
                        if(register1.equals("000") && register2.equals("400")){
                            memory1 = rA;
                        }
                        else if(register1.equals("001") && register2.equals("400")){
                            memory1 = rB;
                        }
                        else if(register1.equals("000") && register2.equals("500")){
                            memory2 = rA;
                        }
                        else{
                            memory2 = rB;
                        }
                        break;
                    case "09":
                        // ENDS PROGRAM
                        break;
                    //10 square number	(addressA * addressA and saved in addressA)
                    case "10":
                        if(register1.equals("000")){
                            rA = rA * rA;
                        }
                        else{
                            rB = rB * rB;
                        }
                        break;
                    // OPCODE ABOVE 10
                    default:
                        System.out.println("opcode error");
                }
                
                // DISPLAY OUTPUT
                System.out.println("opcode\tr1\tr2");
                System.out.println(op + "\t" + register1 + "\t" + register2);        
                System.out.println(op + "\t" + rA + "\t" + rB + "\n");
                
                
                
            }
            
            // ANSWER IS STORED IN SECOND REGISTER
            if(register2.equals("000")){
                System.out.println("OUTPUT " + rA);
            }
            else if(register2.equals("001")){
                System.out.println("OUTPUT " + rB);
            }
            else if(register2.equals("400")){
                System.out.println("OUTPUT " + memory1);
            }
            else{
                System.out.println("OUTPUT " + memory2);
            }
            
        }
        catch(Exception e){
            System.out.println("error in reading" + e);
        }
    }
    
}

---------------------opcode1.txt-----------------------

06 000 010
06 001 002 
04 000 001	
06 000 005
03 001 000
06 001 003
05 000 001
06 000 012
02 000 001
08 001 400
09 000 000

---------------------opcode2.txt-----------------------

06 000 050
06 001 010
02 000 001
07 400 000
03 001 000
06 001 107
03 001 000
10 000 000
06 001 100
05 000 001
08 001 500
09 000 000

---------------------opcode3.txt-----------------------

07 400 000
07 500 001
02 000 001
06 000 003
05 001 000
06 000 006
03 001 000
03 001 000
10 000 000
07 500 001
02 000 001
09 000 000

------------------ OUTPUT -------------------------

run:
opcode	r1	r2
06	000	010
06	10	0

opcode	r1	r2
06	001	002
06	10	2

opcode	r1	r2
04	000	001
04	10	20

opcode	r1	r2
06	000	005
06	5	20

opcode	r1	r2
03	001	000
03	15	20

opcode	r1	r2
06	001	003
06	15	3

opcode	r1	r2
05	000	001
05	15	5

opcode	r1	r2
06	000	012
06	12	5

opcode	r1	r2
02	000	001
02	12	17

opcode	r1	r2
08	001	400
08	12	17

terminate
OUTPUT 17
opcode	r1	r2
06	000	050
06	50	0

opcode	r1	r2
06	001	010
06	50	10

opcode	r1	r2
02	000	001
02	50	60

opcode	r1	r2
07	400	000
07	50	0

opcode	r1	r2
03	001	000
03	-50	0

opcode	r1	r2
06	001	107
06	-50	107

opcode	r1	r2
03	001	000
03	157	107

opcode	r1	r2
10	000	000
10	24649	107

opcode	r1	r2
06	001	100
06	24649	100

opcode	r1	r2
05	000	001
05	24649	246

opcode	r1	r2
08	001	500
08	24649	246

terminate
OUTPUT 246
opcode	r1	r2
07	400	000
07	0	246

opcode	r1	r2
07	500	001
07	0	246

opcode	r1	r2
02	000	001
02	0	246

opcode	r1	r2
06	000	003
06	3	246

opcode	r1	r2
05	001	000
05	82	246

opcode	r1	r2
06	000	006
06	6	246

opcode	r1	r2
03	001	000
03	240	246

opcode	r1	r2
03	001	000
03	6	246

opcode	r1	r2
10	000	000
10	36	246

opcode	r1	r2
07	500	001
07	36	246

opcode	r1	r2
02	000	001
02	36	282

terminate
OUTPUT 282
BUILD SUCCESSFUL (total time: 0 seconds)